package com.sqisoft.ssbr.datasync.resources;import java.io.BufferedReader;import java.io.InputStream;import java.io.InputStreamReader;import java.util.Enumeration;import java.util.HashMap;import java.util.Locale;import java.util.Properties;import org.apache.struts.util.MessageResources;import org.apache.struts.util.MessageResourcesFactory;import com.mitzz.frame.conf.Configuration;import com.mitzz.frame.conf.ConfigurationException;import com.sqisoft.ssbr.datasync.util.MessageHelper;public class LocalizedMessageResources extends MessageResources {	private static final long serialVersionUID = 4336219501298215061L;	private Configuration conf = null;	protected HashMap<String, String> locales = new HashMap<String, String>();	protected HashMap<String, String> messages = new HashMap<String, String>();	public LocalizedMessageResources(MessageResourcesFactory factory, String config) {		super(factory, config);		MessageHelper.load(this);		try {			this.conf = Configuration.getInstance();		}		catch (ConfigurationException e) {			e.printStackTrace();		}	}	public LocalizedMessageResources(MessageResourcesFactory factory, String config, boolean returnNull) {		super(factory, config, returnNull);		MessageHelper.load(this);		try {			this.conf = Configuration.getInstance();		}		catch (ConfigurationException e) {			e.printStackTrace();		}	}	public String getMessage(Locale locale, String key) {		String localeKey = localeKey(locale);		String originalKey = messageKey(localeKey, key);		String messageKey = null;		String message = null;		int underscore = 0;		boolean addIt = false;		while (true) {			loadLocale(localeKey);			messageKey = messageKey(localeKey, key);			synchronized (this.messages) {				message = (String)this.messages.get(messageKey);				if (message != null) {					if (addIt) {						this.messages.put(originalKey, message);					}					return message;				}			}			addIt = true;			underscore = localeKey.lastIndexOf("_");			if (underscore < 0)				break;			localeKey = localeKey.substring(0, underscore);		}		if (!this.defaultLocale.equals(locale)) {			localeKey = localeKey(this.defaultLocale);			messageKey = messageKey(localeKey, key);			loadLocale(localeKey);			synchronized (this.messages) {				message = (String)this.messages.get(messageKey);				if (message != null) {					this.messages.put(originalKey, message);					return message;				}			}		}		localeKey = "";		messageKey = messageKey(localeKey, key);		loadLocale(localeKey);		synchronized (this.messages) {			message = (String)this.messages.get(messageKey);			if (message != null) {				this.messages.put(originalKey, message);				return message;			}		}		if (this.returnNull) {			return null;		}		return "???" + messageKey(locale, key) + "???";	}	protected void loadLocale(String localeKey) {		synchronized (this.locales) {			if (this.locales.get(localeKey) != null) {				return;			}			this.locales.put(localeKey, localeKey);		}		String name = this.config.replace('.', '/');		if (localeKey.length() > 0) {			name = name + "_" + localeKey;		}		name = name + ".properties";		InputStream is = null;		Properties props = new Properties();		try {			ClassLoader classLoader = Thread.currentThread().getContextClassLoader();			if (classLoader == null) {				classLoader = getClass().getClassLoader();			}			is = classLoader.getResourceAsStream(name);			if (is != null) {				BufferedReader reader = new BufferedReader(						new InputStreamReader(is, this.conf.get("frame.message.encoding")));				while (true) {					String line = reader.readLine();					if (line == null) {						break;					}					line = line.trim();					if ((line.length() == 0) || (line.charAt(0) == '#') || (line.indexOf("=") < 0)) {						continue;					}					String key = line.substring(0, line.indexOf("="));					String value = line.substring(line.indexOf("=") + 1);					props.setProperty(key, value);				}				is.close();			}		}		catch (Throwable t) {			if (is != null) {				try {					is.close();				}				catch (Throwable localThrowable1) {				}			}		}		if (props.size() < 1) {			return;		}		synchronized (this.messages) {			Enumeration<Object> names = props.keys();			while (names.hasMoreElements()) {				String key = (String)names.nextElement();				this.messages.put(messageKey(localeKey, key), props.getProperty(key));			}		}	}}
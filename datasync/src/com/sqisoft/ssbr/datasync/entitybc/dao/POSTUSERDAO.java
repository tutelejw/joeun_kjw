package com.sqisoft.ssbr.datasync.entitybc.dao;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStreamWriter;import java.io.UnsupportedEncodingException;import java.sql.SQLException;import com.mitzz.frame.conf.Configuration;import com.mitzz.frame.conf.ConfigurationException;import com.mitzz.frame.entitydao.AbstractMysqlEntityDao;import com.mitzz.frame.exception.LException;import com.mitzz.frame.exception.SysException;import com.mitzz.frame.sql.SqlManager;import com.mitzz.frame.sql.SqlManagerXmlFactory;import com.mitzz.frame.vo.ValueObject;import com.opencsv.CSVWriter;import com.sqisoft.ssbr.datasync.vo.APRVUSERGROUPVO;import com.sqisoft.ssbr.datasync.vo.POSTUSERVO;public class POSTUSERDAO extends AbstractMysqlEntityDao {	private CSVWriter cw;		//결재자 조회	public POSTUSERVO retrievePostUserList(POSTUSERVO vo) throws LException {		Configuration conf;		int EXPORT=0;		String path="/www/datasync/";		int count = 0;		try {			conf = Configuration.getInstance();			EXPORT=conf.getInt("frame.export.csv");			path = conf.getString("frame.export.path");		} catch (ConfigurationException e) {			logger.error(e.getMessage());		}				POSTUSERVO resultVO = new POSTUSERVO();				try {			SqlManager query = SqlManagerXmlFactory.getInstance().get(getClass().getName(), "retrievePostUserList");			openDirectConnection("tosource");			setPreparedStatement(query.getSql());			executeJQuery(resultVO);			while (this.rset.next()) {				POSTUSERVO temp = new POSTUSERVO();				temp.setUserId(this.rset.getString("USERID"));				temp.setMailId(this.rset.getString("MAILID"));				temp.setUserName(this.rset.getString("USERNAME"));				temp.setDeptId(this.rset.getString("DEPTID"));				temp.setDeptName(this.rset.getString("DEPTNAME"));				temp.setDutyName(this.rset.getString("DUTYNAME"));				temp.setSeq(this.rset.getString("SEQ"));				temp.setUpdtDt(this.rset.getString("UPDATE"));				temp.setUseFlag(this.rset.getString("USEFLAG"));				resultVO.add(temp);				count ++;			}		} catch (SQLException e) {			throw new SysException(e);		} finally {			close();		}				if(EXPORT==1){			logger.info("exportCSV");			cw = null;			try {				cw = new CSVWriter(new OutputStreamWriter(new FileOutputStream(path+"/postUser.csv"), "UTF-8"),',');			} catch (UnsupportedEncodingException | FileNotFoundException e  ) {				logger.error(e.getMessage());				try {					cw.close();				} catch (IOException e1) {					logger.error(e.getMessage());				}			}			for(int i=0; i < resultVO.size(); i++){				POSTUSERVO temp=(POSTUSERVO) resultVO.get(i);				cw.writeNext(new String[]{temp.getUserId(), temp.getUserName(), temp.getDeptId(), temp.getDeptName(), temp.getDutyName(), temp.getMailId()});			}			try {				cw.close();			} catch (IOException e) {				logger.error(e.getMessage());			}		}				resultVO.setCount(count);		return resultVO;	}	public int[] updatePostUserList(POSTUSERVO voList) throws LException {		int[] result;		try {			SqlManager query = SqlManagerXmlFactory.getInstance().get(getClass().getName(), "insertPostUser");			openDirectConnection("tosource");			setPreparedStatement(query.getSql());						for (int i = 0; i < voList.size(); i++) {				POSTUSERVO vo = (POSTUSERVO)voList.get(i);				if (vo.getSeq() != null) {					if (vo.getSeq().equals(""))						vo.setSeq("9999");				}				else {					vo.setSeq("9999");				}				this.prepStmtWrap.setString(vo.getUserId());				this.prepStmtWrap.setString(vo.getMailId());				this.prepStmtWrap.setString(vo.getUserName());				this.prepStmtWrap.setString(vo.getDeptId());				this.prepStmtWrap.setString(vo.getDeptName());				this.prepStmtWrap.setString(vo.getDutyName());				this.prepStmtWrap.setString(vo.getSeq());				this.prepStmtWrap.addBatch();				this.prepStmtWrap.clearParameters();				if ((i <= 0) || (i % 1000 != 0)) continue; executeBatch();			}			result = executeBatch();			SqlManager query2 = SqlManagerXmlFactory.getInstance().get(getClass().getName(), "deletePostUser");			setPreparedStatement(query2.getSql());			executeDelete();		}		catch (SQLException e) {			throw new SysException(e);		}		finally {			close();		}		return result;	}		public int[] updateAprvUserList(ValueObject voList) throws LException {		int[] result;				try {			SqlManager query = SqlManagerXmlFactory.getInstance().get(getClass().getName(), "insertCsvAprvGroupGrp");			openDirectConnection("tosource");			setPreparedStatement(query.getSql());						for (int i = 0; i < voList.size(); i++) {				APRVUSERGROUPVO vo = (APRVUSERGROUPVO)voList.get(i);				this.prepStmtWrap.setString(vo.getUserId());				this.prepStmtWrap.setString(vo.getUserName());				this.prepStmtWrap.setString(vo.getAprvId());								this.prepStmtWrap.setString(vo.getUserName());				this.prepStmtWrap.addBatch();				this.prepStmtWrap.clearParameters();				if ((i <= 0) || (i % 1000 != 0)) continue; executeBatch();			}			result = executeBatch();			SqlManager query2 = SqlManagerXmlFactory.getInstance().get(getClass().getName(), "deleteAprvGroupGrp");			setPreparedStatement(query2.getSql());			executeDelete();		}		catch (SQLException e) {			throw new SysException(e);		}		finally {			close();		}		return result;	}					public static void main(String[] args) throws LException {		//POSTUSERDAO udd = new POSTUSERDAO();		//udd.insertUser();	}}
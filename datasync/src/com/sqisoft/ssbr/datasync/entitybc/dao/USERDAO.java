package com.sqisoft.ssbr.datasync.entitybc.dao;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStreamWriter;import java.io.UnsupportedEncodingException;import java.sql.SQLException;import com.mitzz.frame.conf.Configuration;import com.mitzz.frame.conf.ConfigurationException;import com.mitzz.frame.entitydao.AbstractMysqlEntityDao;import com.mitzz.frame.exception.LException;import com.mitzz.frame.exception.SysException;import com.mitzz.frame.sql.SqlManager;import com.mitzz.frame.sql.SqlManagerXmlFactory;import com.mitzz.frame.vo.ValueObject;import com.opencsv.CSVWriter;import com.sqisoft.ssbr.datasync.vo.APRVUSERGROUPVO;import com.sqisoft.ssbr.datasync.vo.USERVO;public class USERDAO extends AbstractMysqlEntityDao {	private CSVWriter cw;		public USERVO retrieveUserList(USERVO vo) throws LException {		Configuration conf;		int EXPORT=0;		String path="/www/datasync/";		int count = 0;		try {			conf = Configuration.getInstance();			EXPORT=conf.getInt("frame.export.csv");			path = conf.getString("frame.export.path");		} catch (ConfigurationException e) {			logger.error(e.getMessage());		}				USERVO resultVO = new USERVO();		try {			SqlManager query = SqlManagerXmlFactory.getInstance().get(getClass().getName(), "retrieveUserList");			openDirectConnection("fromsource");			setPreparedStatement(query.getSql());			executeJQuery(resultVO);			while (this.rset.next()) {				USERVO temp = new USERVO();				temp.setUserId(this.rset.getString("USERID"));				temp.setUserName(this.rset.getString("USERNAME"));				temp.setUserPswd(this.rset.getString("USERPSWD"));				temp.setDeptId(this.rset.getString("DEPTID"));				temp.setDeptName(this.rset.getString("DEPTNAME"));				temp.setDutyName(this.rset.getString("DUTYNAME"));				temp.setSeq(this.rset.getString("SEQ"));				temp.setEMail(this.rset.getString("EMAIL"));				temp.setTel(this.rset.getString("TEL"));				temp.setPhone(this.rset.getString("PHONE"));				temp.setUserStat(this.rset.getString("STAT"));				resultVO.add(temp);				count ++;			}		} catch (SQLException e) {			throw new SysException(e);		} finally {			close();		}				if(EXPORT==1){			logger.info("exportCSV");			cw = null;			try {				cw = new CSVWriter(new OutputStreamWriter(new FileOutputStream(path+"/user.csv"), "UTF-8"),',');			} catch (UnsupportedEncodingException | FileNotFoundException e  ) {				logger.error(e.getMessage());				try {					cw.close();				} catch (IOException e1) {					logger.error(e.getMessage());				}			}			for(int i=0; i < resultVO.size(); i++){				USERVO temp=(USERVO) resultVO.get(i);				cw.writeNext(new String[]{temp.getUserId(), temp.getUserName(), temp.getDeptId(), temp.getDeptName(), temp.getDutyName(), temp.getEMail()});			}			try {				cw.close();			} catch (IOException e) {				logger.error(e.getMessage());			}		}				resultVO.setCount(count);		return resultVO;	}	public int[] updateUserList(USERVO voList) throws LException {		int[] result;		try {			SqlManager query1 = SqlManagerXmlFactory.getInstance().get(getClass().getName(), "insertUser");			openDirectConnection("tosource");			setPreparedStatement(query1.getSql());			String initPswd=voList.get("initPswd");			for (int i = 0; i < voList.size(); i++) {				USERVO vo = (USERVO)voList.get(i);				if (vo.getSeq() != null) {					if (vo.getSeq().equals(""))						vo.setSeq("9999");				}				else {					vo.setSeq("9999");				}				this.prepStmtWrap.setString(vo.getSeq());				this.prepStmtWrap.setString(vo.getUserId());				this.prepStmtWrap.setString(vo.getUserName());				this.prepStmtWrap.setString(vo.getUserPswd());				this.prepStmtWrap.setString(vo.getDeptId());				this.prepStmtWrap.setString(vo.getDeptName());				this.prepStmtWrap.setString(vo.getEMail());				this.prepStmtWrap.setString(vo.getDutyName());				this.prepStmtWrap.setString(vo.getTel());				this.prepStmtWrap.setString(vo.getPhone());				this.prepStmtWrap.setString(vo.getUserStat());				this.prepStmtWrap.setString(vo.getUserName());				this.prepStmtWrap.setString(vo.getUserPswd());				this.prepStmtWrap.setString(vo.getDeptId());				this.prepStmtWrap.setString(vo.getDeptName());				this.prepStmtWrap.setString(vo.getEMail());				this.prepStmtWrap.setString(vo.getDutyName());				this.prepStmtWrap.setString(vo.getTel());				this.prepStmtWrap.setString(vo.getPhone());				this.prepStmtWrap.setString(vo.getUserStat());				//this.prepStmtWrap.setString(vo.getTeamManager()); // team_manager 컬럼 추가				this.prepStmtWrap.addBatch();				this.prepStmtWrap.clearParameters();				if ((i <= 0) || (i % 1000 != 0)) continue; executeBatch();			}			result = executeBatch();			SqlManager query2 = SqlManagerXmlFactory.getInstance().get(getClass().getName(), "deleteUser");			setPreparedStatement(query2.getSql());			executeDelete();		}		catch (SQLException e) {			throw new SysException(e);		}		finally {			close();		}		return result;	}			public int[] updateUserCsvList(ValueObject voList) throws LException {		int[] result;		try {			SqlManager query1 = SqlManagerXmlFactory.getInstance().get(getClass().getName(), "insertCsvUser");			openDirectConnection("tosource");			setPreparedStatement(query1.getSql());			String initPswd=voList.get("initPswd");						for (int i = 0; i < voList.size(); i++) {				USERVO vo = (USERVO)voList.get(i);				//추후 유저넘버 수정시 해당 주석풀면 됩니다.				/*vo.set("EMPLNO","9999");				this.prepStmtWrap.setString(vo.get("EMPLNO"));*/				this.prepStmtWrap.setString(vo.getUserNo());				this.prepStmtWrap.setString(vo.getUserId());				this.prepStmtWrap.setString(vo.getUserName());				this.prepStmtWrap.setString(initPswd);				this.prepStmtWrap.setString(vo.getEMail());				this.prepStmtWrap.setString(vo.getUserDeptRank());				this.prepStmtWrap.setString(vo.getDutyName());				this.prepStmtWrap.setString(vo.getTel());				this.prepStmtWrap.setString(vo.getPhone());				this.prepStmtWrap.setString("1");				this.prepStmtWrap.setString(vo.getTeamManager()); // team_manager 컬럼 추가				this.prepStmtWrap.setString(vo.getDeptId());																this.prepStmtWrap.setString(vo.getUserName());				this.prepStmtWrap.setString(vo.getEMail());				this.prepStmtWrap.setString(vo.getUserDeptRank());				this.prepStmtWrap.setString(vo.getDutyName());				this.prepStmtWrap.setString(vo.getTel());				this.prepStmtWrap.setString(vo.getPhone());				this.prepStmtWrap.setString("1");				this.prepStmtWrap.setString(vo.getTeamManager()); // team_manager 컬럼 추가								this.prepStmtWrap.addBatch();				this.prepStmtWrap.clearParameters();				if ((i <= 0) || (i % 1000 != 0)) continue; executeBatch();			}			result = executeBatch();			SqlManager query2 = SqlManagerXmlFactory.getInstance().get(getClass().getName(), "deleteUser");			setPreparedStatement(query2.getSql());			executeDelete();		}		catch (SQLException e) {			throw new SysException(e);		}		finally {			close();		}		return result;	}			public int[] insertUser() throws LException {		int[] result;		try {			SqlManager query1 = SqlManagerXmlFactory.getInstance().get(getClass().getName(), "insertUser");			openDirectConnection("tosource");			setPreparedStatement(query1.getSql());			int dept = 1;			int temp = 1;			for (int i = 1; i <= 100; i++) {				if (temp == 11) {					dept++;					temp = 1;				}				this.prepStmtWrap.setString("hotuser"+i);				this.prepStmtWrap.setString("hotuser"+i);				this.prepStmtWrap.setString("테스트"+i);				this.prepStmtWrap.setString("qwe123!@#");//				this.prepStmtWrap.setString("dept"+dept);//				this.prepStmtWrap.setString("부서"+dept);				this.prepStmtWrap.setString("dept999");				this.prepStmtWrap.setString("부서999");				this.prepStmtWrap.setString("");				this.prepStmtWrap.setString("");				this.prepStmtWrap.setString("");				this.prepStmtWrap.setString("");				this.prepStmtWrap.setString("1");				this.prepStmtWrap.setString("테스트"+i);				this.prepStmtWrap.setString("dept"+dept);				this.prepStmtWrap.setString("부서"+dept);				this.prepStmtWrap.setString("");				this.prepStmtWrap.setString("");				this.prepStmtWrap.setString("");				this.prepStmtWrap.setString("");				this.prepStmtWrap.setString("1");				this.prepStmtWrap.addBatch();				this.prepStmtWrap.clearParameters();				System.out.println("user"+i + ", dept"+dept);				temp++;				if ((i <= 0) || (i % 1000 != 0)) continue; executeBatch();			}						result = executeBatch();		}		catch (SQLException e) {			throw new SysException(e);		}		finally {			close();		}		return result;	}	public static void main(String[] args) throws LException {		USERDAO udd = new USERDAO();		udd.insertUser();	}}
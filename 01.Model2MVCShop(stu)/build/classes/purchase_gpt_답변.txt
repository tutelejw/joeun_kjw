아요! 주어진 정보를 바탕으로 PurchaseDAO, PurchaseService, 그리고 PurchaseServiceImpl을 설계해드릴게요. JAVA 입문자 분이 이해하기 쉽도록 구조와 흐름도 함께 설명드릴게요.

1. PurchaseDAO.java
DB와 직접 상호작용하는 DAO 클래스입니다. DBUtil을 통해 데이터베이스 연결 및 종료 처리를 하고, transaction 테이블을 사용해 CRUD 작업을 구현합니다.

java
복사
편집
package com.model2.mvc.service.purchase.dao;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import com.model2.mvc.common.util.DBUtil;
import com.model2.mvc.service.purchase.vo.PurchaseVO;
import com.model2.mvc.service.product.vo.ProductVO;
import com.model2.mvc.service.user.vo.UserVO;

public class PurchaseDAO {

    // 1. 구매정보 상세조회
    public PurchaseVO findPurchase(int tranNo) throws SQLException {
        String sql = "SELECT * FROM transaction WHERE tran_no = ?";
        try (Connection conn = DBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, tranNo);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    PurchaseVO p = new PurchaseVO();

                    // 필드 매핑
                    p.setTranNo(rs.getInt("tran_no"));
                    p.setTranCode(rs.getString("tran_status_code"));
                    p.setPaymentOption(rs.getString("payment_option"));
                    p.setReceiverName(rs.getString("receiver_name"));
                    p.setReceiverPhone(rs.getString("receiver_phone"));
                    p.setDivyAddr(rs.getString("demailaddr"));
                    p.setDivyRequest(rs.getString("dlvy_request"));
                    p.setDivyDate(rs.getString("dlvy_date"));
                    p.setOrderDate(rs.getDate("order_data"));

                    ProductVO prod = new ProductVO();
                    prod.setProdNo(rs.getInt("prod_no"));
                    p.setPurchaseProd(prod);

                    UserVO buyer = new UserVO();
                    buyer.setUserId(rs.getString("buyer_id"));
                    p.setBuyer(buyer);

                    return p;
                }
            }
        }
        return null;
    }

    // 2. 구매목록 조회
    public List<PurchaseVO> getPurchaseList() throws SQLException {
        String sql = "SELECT * FROM transaction";
        List<PurchaseVO> list = new ArrayList<>();
        try (Connection conn = DBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                PurchaseVO p = new PurchaseVO();
                p.setTranNo(rs.getInt("tran_no"));
                p.setTranCode(rs.getString("tran_status_code"));
                // 더 필요한 필드 설정
                list.add(p);
            }
        }
        return list;
    }

    // 3. 판매목록 조회
    public List<PurchaseVO> getSaleList() throws SQLException {
        String sql = "SELECT * FROM transaction WHERE tran_status_code = 'SOLD'";
        List<PurchaseVO> list = new ArrayList<>();
        try (Connection conn = DBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                PurchaseVO p = new PurchaseVO();
                p.setTranNo(rs.getInt("tran_no"));
                p.setTranCode(rs.getString("tran_status_code"));
                list.add(p);
            }
        }
        return list;
    }

    // 4. 구매정보 추가
    public void insertPurchase(PurchaseVO purchase) throws SQLException {
        String sql = "INSERT INTO transaction (tran_no, prod_no, buyer_id, payment_option, receiver_name, receiver_phone, demailaddr, dlvy_request, tran_status_code, order_data, dlvy_date)" +
                     " VALUES (seq_transaction_tran_no.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (Connection conn = DBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, purchase.getPurchaseProd().getProdNo());
            stmt.setString(2, purchase.getBuyer().getUserId());
            stmt.setString(3, purchase.getPaymentOption());
            stmt.setString(4, purchase.getReceiverName());
            stmt.setString(5, purchase.getReceiverPhone());
            stmt.setString(6, purchase.getDivyAddr());
            stmt.setString(7, purchase.getDivyRequest());
            stmt.setString(8, purchase.getTranCode());
            stmt.setDate(9, purchase.getOrderDate());
            stmt.setString(10, purchase.getDivyDate());
            stmt.executeUpdate();
        }
    }

    // 5. 구매정보 수정
    public void updatePurchase(PurchaseVO purchase) throws SQLException {
        String sql = "UPDATE transaction SET payment_option = ?, receiver_name = ?, receiver_phone = ?, demailaddr = ?, dlvy_request = ?, dlvy_date = ? WHERE tran_no = ?";
        try (Connection conn = DBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, purchase.getPaymentOption());
            stmt.setString(2, purchase.getReceiverName());
            stmt.setString(3, purchase.getReceiverPhone());
            stmt.setString(4, purchase.getDivyAddr());
            stmt.setString(5, purchase.getDivyRequest());
            stmt.setString(6, purchase.getDivyDate());
            stmt.setInt(7, purchase.getTranNo());
            stmt.executeUpdate();
        }
    }

    // 6. 구매상태코드 수정
    public void updateTranCode(int tranNo, String tranCode) throws SQLException {
        String sql = "UPDATE transaction SET tran_status_code = ? WHERE tran_no = ?";
        try (Connection conn = DBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, tranCode);
            stmt.setInt(2, tranNo);
            stmt.executeUpdate();
        }
    }
}
2. PurchaseService.java
비즈니스 로직 관리를 위한 인터페이스입니다. DAO를 추상화하고 유지보수를 쉽게 해요.

java
복사
편집
package com.model2.mvc.service.purchase.service;

import java.sql.SQLException;
import java.util.List;
import com.model2.mvc.service.purchase.vo.PurchaseVO;

public interface PurchaseService {
    PurchaseVO getPurchase(int tranNo) throws SQLException;
    List<PurchaseVO> getPurchaseList() throws SQLException;
    List<PurchaseVO> getSaleList() throws SQLException;
    void addPurchase(PurchaseVO purchase) throws SQLException;
    void updatePurchase(PurchaseVO purchase) throws SQLException;
    void updateTranCode(int tranNo, String tranCode) throws SQLException;
}
3. PurchaseServiceImpl.java
PurchaseService 인터페이스 구현체입니다. DAO를 호출해 실제 로직을 수행하고, 추후 트랜잭션 추가도 수월하게!

java
복사
편집
package com.model2.mvc.service.purchase.service.impl;

import java.sql.SQLException;
import java.util.List;

import com.model2.mvc.service.purchase.dao.PurchaseDAO;
import com.model2.mvc.service.purchase.vo.PurchaseVO;
import com.model2.mvc.service.purchase.service.PurchaseService;

public class PurchaseServiceImpl implements PurchaseService {

    private PurchaseDAO purchaseDAO = new PurchaseDAO();

    @Override
    public PurchaseVO getPurchase(int tranNo) throws SQLException {
        return purchaseDAO.findPurchase(tranNo);
    }

    @Override
    public List<PurchaseVO> getPurchaseList() throws SQLException {
        return purchaseDAO.getPurchaseList();
    }

    @Override
    public List<PurchaseVO> getSaleList() throws SQLException {
        return purchaseDAO.getSaleList();
    }

    @Override
    public void addPurchase(PurchaseVO purchase) throws SQLException {
        purchaseDAO.insertPurchase(purchase);
    }

    @Override
    public void updatePurchase(PurchaseVO purchase) throws SQLException {
        purchaseDAO.updatePurchase(purchase);
    }

    @Override
    public void updateTranCode(int tranNo, String tranCode) throws SQLException {
        purchaseDAO.updateTranCode(tranNo, tranCode);
    }
}
흐름 요약
Controller (Action)
사용자가 요청 → Action 클래스 호출 → Service 사용

Service
비즈니스 로직 처리 → DAO 호출

DAO
DBUtil 로 DB 연결/닫기 → transaction 테이블에 SQL 수행

VO (PurchaseVO)
transaction 테이블 데이터를 Java 객체로 매핑

이제 Action 클래스와 JSP와 연결하면 MVC 패턴에 따라 실제 동작이 가능해요. 궁금한 사항 있으면 언제든 질문 주세요!